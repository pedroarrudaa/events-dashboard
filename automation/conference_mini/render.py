"""
Render module for Conference Mini - Generate HTML and CSV output.
"""

import os
import csv
from datetime import datetime
from typing import List, Dict, Any


class ConferenceRenderer:
    """Generate HTML and CSV reports from conference data."""
    
    def __init__(self):
        """Initialize the renderer."""
        pass
    
    def generate_html_report(self, conferences: List[Dict[str, Any]], output_dir: str) -> str:
        """
        Generate an HTML report of conferences.
        
        Args:
            conferences: List of conference data
            output_dir: Directory to save the HTML file
            
        Returns:
            Path to the generated HTML file
        """
        html_path = os.path.join(output_dir, "conferences_mini.html")
        
        html_content = self._generate_html_content(conferences)
        
        with open(html_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        return html_path
    
    def generate_csv_report(self, conferences: List[Dict[str, Any]], output_dir: str) -> str:
        """
        Generate a CSV report of conferences.
        
        Args:
            conferences: List of conference data
            output_dir: Directory to save the CSV file
            
        Returns:
            Path to the generated CSV file
        """
        csv_path = os.path.join(output_dir, "conferences_mini.csv")
        
        if not conferences:
            # Create empty CSV
            with open(csv_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(['name', 'url', 'start_date', 'end_date', 'location', 'remote', 'description', 'themes', 'source'])
            return csv_path
        
        # Get all unique keys from all conferences
        all_keys = set()
        for conference in conferences:
            all_keys.update(conference.keys())
        
        # Define preferred column order
        preferred_order = ['name', 'url', 'start_date', 'end_date', 'location', 'remote', 'description', 'themes', 'registration_url', 'registration_deadline', 'source']
        
        # Sort columns with preferred order first
        columns = []
        for col in preferred_order:
            if col in all_keys:
                columns.append(col)
                all_keys.remove(col)
        
        # Add remaining columns
        columns.extend(sorted(all_keys))
        
        with open(csv_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=columns)
            writer.writeheader()
            
            for conference in conferences:
                # Clean values for CSV
                clean_row = {}
                for col in columns:
                    value = conference.get(col, '')
                    if isinstance(value, (list, dict)):
                        value = str(value)
                    clean_row[col] = value
                
                writer.writerow(clean_row)
        
        return csv_path
    
    def _generate_html_content(self, conferences: List[Dict[str, Any]]) -> str:
        """Generate the full HTML content."""
        
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        html = f"""
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conference Mini Report</title>
    <style>
        {self._get_css_styles()}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>🎯 Conference Mini Report</h1>
            <p class="subtitle">Generated on {current_time}</p>
            <div class="stats">
                <span class="stat">📊 Total Conferences: {len(conferences)}</span>
                <span class="stat">🌐 Sources: {self._get_unique_sources(conferences)}</span>
                <span class="stat">📍 Locations: {self._get_unique_locations(conferences)}</span>
                <span class="stat">🏷️ Themes: {self._get_unique_themes(conferences)}</span>
            </div>
        </header>
        
        <main>
            {self._generate_conference_cards(conferences)}
        </main>
        
        <footer>
            <p>Generated by Conference Mini Pipeline</p>
        </footer>
    </div>
</body>
</html>
"""
        return html
    
    def _get_css_styles(self) -> str:
        """Return CSS styles for the HTML report."""
        return """
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            line-height: 1.6;
            color: #333;
            background-color: #f5f7fa;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }
        
        header {
            text-align: center;
            margin-bottom: 40px;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        h1 {
            color: #2c3e50;
            margin-bottom: 10px;
            font-size: 2.5em;
        }
        
        .subtitle {
            color: #7f8c8d;
            margin-bottom: 20px;
        }
        
        .stats {
            display: flex;
            justify-content: center;
            gap: 30px;
            flex-wrap: wrap;
        }
        
        .stat {
            background: #3498db;
            color: white;
            padding: 10px 20px;
            border-radius: 25px;
            font-weight: 500;
        }
        
        .conference-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .conference-card {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .conference-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 20px rgba(0,0,0,0.15);
        }
        
        .conference-title {
            font-size: 1.3em;
            font-weight: 600;
            color: #2c3e50;
            margin-bottom: 15px;
            line-height: 1.4;
        }
        
        .conference-url {
            color: #3498db;
            text-decoration: none;
            word-break: break-all;
            font-size: 0.9em;
            display: block;
            margin-bottom: 15px;
        }
        
        .conference-url:hover {
            text-decoration: underline;
        }
        
        .conference-meta {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .meta-item {
            display: flex;
            align-items: center;
            font-size: 0.9em;
        }
        
        .meta-label {
            font-weight: 600;
            color: #34495e;
            margin-right: 8px;
        }
        
        .meta-value {
            color: #7f8c8d;
        }
        
        .conference-description {
            color: #555;
            line-height: 1.5;
            font-size: 0.95em;
            border-top: 1px solid #ecf0f1;
            padding-top: 15px;
            margin-top: 15px;
        }
        
        .themes {
            margin: 15px 0;
        }
        
        .theme-tag {
            display: inline-block;
            background: #9b59b6;
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.8em;
            margin: 2px;
        }
        
        .tag {
            display: inline-block;
            background: #e74c3c;
            color: white;
            padding: 4px 12px;
            border-radius: 15px;
            font-size: 0.8em;
            margin: 2px;
        }
        
        .tag.remote {
            background: #27ae60;
        }
        
        .tag.location {
            background: #f39c12;
        }
        
        .tag.source {
            background: #34495e;
        }
        
        .tag.registration {
            background: #e67e22;
        }
        
        .no-conferences {
            text-align: center;
            padding: 60px 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        
        .no-conferences h2 {
            color: #7f8c8d;
            margin-bottom: 15px;
        }
        
        footer {
            text-align: center;
            padding: 30px;
            color: #7f8c8d;
            border-top: 1px solid #ecf0f1;
            margin-top: 40px;
        }
        
        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .conference-grid {
                grid-template-columns: 1fr;
            }
            
            .stats {
                flex-direction: column;
                align-items: center;
            }
            
            .conference-meta {
                grid-template-columns: 1fr;
            }
        }
        """
    
    def _generate_conference_cards(self, conferences: List[Dict[str, Any]]) -> str:
        """Generate HTML cards for each conference."""
        if not conferences:
            return """
            <div class="no-conferences">
                <h2>🤷‍♂️ No Conferences Found</h2>
                <p>The pipeline didn't find any conferences matching the criteria.</p>
            </div>
            """
        
        cards_html = '<div class="conference-grid">'
        
        for conference in conferences:
            card_html = self._generate_single_card(conference)
            cards_html += card_html
        
        cards_html += '</div>'
        return cards_html
    
    def _generate_single_card(self, conference: Dict[str, Any]) -> str:
        """Generate HTML for a single conference card."""
        name = conference.get('name', 'Unnamed Conference')
        url = conference.get('url', '#')
        start_date = conference.get('start_date', 'TBD')
        end_date = conference.get('end_date', 'TBD')
        location = conference.get('location', 'TBD')
        remote = conference.get('remote', False)
        description = conference.get('description', 'No description available')
        themes = conference.get('themes', [])
        source = conference.get('source', 'unknown')
        registration_url = conference.get('registration_url', url)
        registration_deadline = conference.get('registration_deadline', 'TBD')
        
        # Format dates
        date_range = self._format_date_range(start_date, end_date)
        
        # Generate theme tags
        themes_html = ''
        if themes:
            for theme in themes[:5]:  # Limit to 5 themes
                themes_html += f'<span class="theme-tag">{self._escape_html(theme)}</span>'
        
        # Generate general tags
        tags_html = ''
        if remote:
            tags_html += '<span class="tag remote">🌐 Remote</span>'
        if location and location != 'TBD':
            tags_html += f'<span class="tag location">📍 {location}</span>'
        tags_html += f'<span class="tag source">📡 {source}</span>'
        if registration_deadline and registration_deadline != 'TBD':
            tags_html += f'<span class="tag registration">⏰ Deadline: {registration_deadline}</span>'
        
        return f"""
        <div class="conference-card">
            <h3 class="conference-title">{self._escape_html(name)}</h3>
            <a href="{url}" target="_blank" class="conference-url">{self._truncate_url(url)}</a>
            
            <div class="conference-meta">
                <div class="meta-item">
                    <span class="meta-label">📅 Dates:</span>
                    <span class="meta-value">{date_range}</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">📍 Location:</span>
                    <span class="meta-value">{self._escape_html(location)}</span>
                </div>
            </div>
            
            {f'<div class="themes">{themes_html}</div>' if themes_html else ''}
            
            <div class="tags">
                {tags_html}
            </div>
            
            <div class="conference-description">
                {self._escape_html(description[:200])}{'...' if len(description) > 200 else ''}
            </div>
            
            {f'<div style="margin-top: 15px;"><a href="{registration_url}" target="_blank" style="color: #3498db;">🎫 Register</a></div>' if registration_url != url else ''}
        </div>
        """
    
    def _format_date_range(self, start_date: str, end_date: str) -> str:
        """Format date range for display."""
        if start_date == 'TBD' and end_date == 'TBD':
            return 'TBD'
        elif start_date == end_date:
            return start_date
        elif end_date == 'TBD' or not end_date:
            return f"{start_date} (Single day)"
        else:
            return f"{start_date} - {end_date}"
    
    def _get_unique_sources(self, conferences: List[Dict[str, Any]]) -> int:
        """Get count of unique sources."""
        sources = set(c.get('source', 'unknown') for c in conferences)
        return len(sources)
    
    def _get_unique_locations(self, conferences: List[Dict[str, Any]]) -> int:
        """Get count of unique locations."""
        locations = set(c.get('location', 'TBD') for c in conferences if c.get('location') and c.get('location') != 'TBD')
        return len(locations)
    
    def _get_unique_themes(self, conferences: List[Dict[str, Any]]) -> int:
        """Get count of unique themes."""
        all_themes = set()
        for conference in conferences:
            themes = conference.get('themes', [])
            if isinstance(themes, list):
                all_themes.update(themes)
        return len(all_themes)
    
    def _escape_html(self, text: str) -> str:
        """Escape HTML characters in text."""
        if not isinstance(text, str):
            text = str(text)
        
        return (text.replace('&', '&amp;')
                   .replace('<', '&lt;')
                   .replace('>', '&gt;')
                   .replace('"', '&quot;')
                   .replace("'", '&#x27;'))
    
    def _truncate_url(self, url: str, max_length: int = 60) -> str:
        """Truncate URL for display."""
        if len(url) <= max_length:
            return url
        
        return url[:max_length-3] + '...' 